package com.droid.botcam;

import android.Manifest;
import android.app.Activity;
import android.content.Context;
import android.content.pm.PackageManager;
import android.content.res.Configuration;
import android.graphics.Bitmap;
import android.graphics.BitmapFactory;
import android.graphics.ImageFormat;
import android.graphics.Matrix;
import android.graphics.Point;
import android.graphics.Rect;
import android.graphics.RectF;
import android.graphics.SurfaceTexture;
import android.hardware.camera2.CameraAccessException;
import android.hardware.camera2.CameraCaptureSession;
import android.hardware.camera2.CameraCharacteristics;
import android.hardware.camera2.CameraDevice;
import android.hardware.camera2.CameraManager;
import android.hardware.camera2.CameraMetadata;
import android.hardware.camera2.CaptureRequest;
import android.hardware.camera2.CaptureResult;
import android.hardware.camera2.TotalCaptureResult;
import android.hardware.camera2.params.StreamConfigurationMap;
import android.media.Image;
import android.media.ImageReader;
import android.os.Bundle;
import android.os.Handler;
import android.os.HandlerThread;
import android.util.Size;
import android.util.SparseIntArray;
import android.view.LayoutInflater;
import android.view.MotionEvent;
import android.view.Surface;
import android.view.TextureView;
import android.view.View;
import android.view.ViewGroup;
import android.widget.FrameLayout;

import androidx.annotation.NonNull;
import androidx.core.content.ContextCompat;
import androidx.fragment.app.Fragment;

import java.io.File;
import java.io.FileOutputStream;
import java.io.IOException;
import java.nio.ByteBuffer;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collections;
import java.util.Comparator;
import java.util.List;
import java.util.concurrent.Semaphore;
import java.util.concurrent.TimeUnit;

public class BotCamera extends Fragment {
    private static final String FOLDER_NAME = "BotCamera";

    /**
     * Convert screen rotation to JPEG orientation.
     */
    private static final SparseIntArray REAR_ORIENTATIONS = new SparseIntArray();

    static {
        REAR_ORIENTATIONS.append(Surface.ROTATION_0, 90);
        REAR_ORIENTATIONS.append(Surface.ROTATION_90, 0);
        REAR_ORIENTATIONS.append(Surface.ROTATION_180, 270);
        REAR_ORIENTATIONS.append(Surface.ROTATION_270, 180);
    }

    private static final SparseIntArray FRONT_ORIENTATIONS = new SparseIntArray();

    static {
        FRONT_ORIENTATIONS.append(Surface.ROTATION_0, 270);
        FRONT_ORIENTATIONS.append(Surface.ROTATION_90, 0);
        FRONT_ORIENTATIONS.append(Surface.ROTATION_180, 180);
        FRONT_ORIENTATIONS.append(Surface.ROTATION_270, 270);
    }

    //Camera State : Preview
    private static final int STATE_PREVIEW = 0;

    //Camera State : Waiting for Focus Lock
    private static final int STATE_WAITING_LOCK = 1;

    //Camera State : Waiting for PreCapture State
    private static final int STATE_WAITING_PRECAPTURE = 2;

    //Camera State : Wait for something other than PreCapture
    private static final int STATE_WAITING_NON_PRECAPTURE = 3;

    //Camera State : PictureTaken
    private static final int STATE_PICTURE_TAKEN = 4;

    //Max Width for the Preview
    private static final int MAX_PREVIEW_WIDTH = 1920;

    //Max Height for the Preview
    private static final int MAX_PREVIEW_HEIGHT = 1080;

    //Camera ID - Rear or Front Camera
    private String mCameraId = "0";

    //Custom Texture View to customize Aspect Ratios
    private AutoFitTextureView mTextureView;

    //Frame in Preview
    private FrameLayout mFrame;
    private float frameWidth, frameHeight, frameTop, frameLeft;

    //Capture Session for Camera
    private CameraCaptureSession mCaptureSession;

    //The selected Camera Device
    private CameraDevice mCameraDevice;

    //Preview Size
    private Size mPreviewSize;

    //Additional thread to run the Camera related tasks so that UI Operations don't get affected
    private HandlerThread mBackgroundThread;

    //To run camera related tasks in the background
    private Handler mBackgroundHandler;

    //To handle the image capture and processing
    private ImageReader mImageReader;

    //To customize and build the camera preview
    private CaptureRequest.Builder mPreviewRequestBuilder;

    //This is generated by mPreviewRequestBuilder.build() (Optional to save as global variable)
    private CaptureRequest mPreviewRequest;

    //Camera Current State (Starts with Preview)
    private int mState = STATE_PREVIEW;

    //To handle leakage like closing the camera before exiting the application or activity
    private Semaphore mCameraOpenCloseLock = new Semaphore(1);

    //If Flash is Supported or not
    private boolean mFlashSupported;

    //Orientation of the camera sensor
    private int mSensorOrientation;

    //Created Folder
    private File folder;

    //Directory to Save the captured images
    private File imageDirectory;

    //Fragment Height and Width
    private int fragmentHeight, fragmentWidth;

    //The Rootview in our Fragment
    private View rootView;

    //If flash is allowed
    private boolean useFlash = true;

    //Zoom Preview
    private float fingerSpacing = 0;
    private float zoomLevel = 1f;
    private float maximumZoomLevel;
    private Rect zoom;
    private boolean allowZoom = true;
    private Bitmap cropFrame;


    public static BotCamera newInstance() {
        return new BotCamera();
    }

    @Override
    public View onCreateView(LayoutInflater inflater, ViewGroup container,
                             Bundle savedInstanceState) {
        rootView = inflater.inflate(R.layout.fragment_bot_camera, container, false);

        rootView.post(new Runnable() {
            @Override
            public void run() {
                fragmentHeight = rootView.getMeasuredHeight();
                fragmentWidth = rootView.getMeasuredWidth();

                int screenHeight = DroidFunctions.getScreenHeight();
                int screenWidth = DroidFunctions.getScreenWidth();

                if (fragmentHeight > screenHeight - 10 && fragmentHeight < screenHeight + 10 &&
                        fragmentWidth > screenWidth - 10 && fragmentWidth < screenWidth + 10) {
                    AutoFitTextureView.isFullScreen = true;
                } else {
                    AutoFitTextureView.isFullScreen = false;
                }

                //Get Frame Values
                int[] location = new int[2];
                mFrame.getLocationOnScreen(location);
                frameLeft = location[0];
                frameTop = location[1];
                frameWidth = mFrame.getMeasuredWidth();
                frameHeight = mFrame.getMeasuredHeight();
            }
        });
        return rootView;
    }

    @Override
    public void onViewCreated(final View view, Bundle savedInstanceState) {
        mTextureView = view.findViewById(R.id.texture);
        mFrame = view.findViewById(R.id.frame);
        if (cropFrame != null) {
            mFrame.setBackground(DroidFunctions.bitmapToDrawable(getActivity(), cropFrame));
            mFrame.getLayoutParams().height = (int) DroidFunctions.dpToPx(frameHeight);
            mFrame.getLayoutParams().width = (int) DroidFunctions.dpToPx(frameWidth);
        } else {
            mFrame.setBackground(null);
        }
        mTextureView.invalidate();
        setUpPinchZoom();
    }

    @Override
    public void onResume() {
        super.onResume();
        startBackgroundThread();
        if (mTextureView.isAvailable()) {
            openCamera(mTextureView.getWidth(), mTextureView.getHeight());
        } else {
            mTextureView.setSurfaceTextureListener(mSurfaceTextureListener);
        }
    }

    @Override
    public void onPause() {
        closeCamera();
        stopBackgroundThread();
        super.onPause();
    }


    //Lifecycle Events of TextureView
    private final TextureView.SurfaceTextureListener mSurfaceTextureListener = new TextureView.SurfaceTextureListener() {

        @Override
        public void onSurfaceTextureAvailable(SurfaceTexture texture, int width, int height) {
            openCamera(width, height);
        }

        @Override
        public void onSurfaceTextureSizeChanged(SurfaceTexture texture, int width, int height) {
            configureTransform(width, height);
        }

        @Override
        public boolean onSurfaceTextureDestroyed(SurfaceTexture texture) {
            return true;
        }

        @Override
        public void onSurfaceTextureUpdated(SurfaceTexture texture) {
        }

    };


    //StateCallback is called whenever the device camera changes state
    private final CameraDevice.StateCallback mStateCallback = new CameraDevice.StateCallback() {

        @Override
        public void onOpened(@NonNull CameraDevice cameraDevice) {
            mCameraOpenCloseLock.release();
            mCameraDevice = cameraDevice;
            createCameraPreviewSession();
        }

        @Override
        public void onDisconnected(@NonNull CameraDevice cameraDevice) {
            mCameraOpenCloseLock.release();
            cameraDevice.close();
            mCameraDevice = null;
        }

        @Override
        public void onError(@NonNull CameraDevice cameraDevice, int error) {
            mCameraOpenCloseLock.release();
            cameraDevice.close();
            mCameraDevice = null;
            Activity activity = getActivity();
            if (null != activity) {
                activity.finish();
            }
        }
    };

    //Create the folder in Exernal Storage
    private void createFolderInExternalStorage() {
        if (ContextCompat.checkSelfPermission(getActivity(), Manifest.permission.WRITE_EXTERNAL_STORAGE)
                != PackageManager.PERMISSION_GRANTED) {
            return;
        }

        folder = DroidFunctions.createFolderInExternalStorage(FOLDER_NAME);
    }


    //This will be called when a clicked image is processed and ready to be saved
    private final ImageReader.OnImageAvailableListener mOnImageAvailableListener
            = new ImageReader.OnImageAvailableListener() {

        @Override
        public void onImageAvailable(ImageReader reader) {
            if (imageDirectory != null) {
                if (cropFrame != null) {
                    mBackgroundHandler.post(new CroppedImageSaver(reader.acquireNextImage(), imageDirectory, frameWidth,
                            frameHeight, frameTop, frameLeft));
                } else {
                    mBackgroundHandler.post(new ImageSaver(reader.acquireNextImage(), imageDirectory));
                }
            } else {
                //Directory not Created
            }
        }

    };


    //Events triggered upon capturing
    private CameraCaptureSession.CaptureCallback mCaptureCallback
            = new CameraCaptureSession.CaptureCallback() {

        private void process(CaptureResult result) {
            switch (mState) {
                case STATE_PREVIEW: {
                    // We have nothing to do when the camera preview is working normally.
                    break;
                }
                case STATE_WAITING_LOCK: {
                    Integer afState = result.get(CaptureResult.CONTROL_AF_STATE);
                    if (afState == null) {
                        captureStillPicture();
                    } else if (CaptureResult.CONTROL_AF_STATE_FOCUSED_LOCKED == afState ||
                            CaptureResult.CONTROL_AF_STATE_NOT_FOCUSED_LOCKED == afState) {
                        // CONTROL_AE_STATE can be null on some devices
                        Integer aeState = result.get(CaptureResult.CONTROL_AE_STATE);
                        if (aeState == null ||
                                aeState == CaptureResult.CONTROL_AE_STATE_CONVERGED) {
                            mState = STATE_PICTURE_TAKEN;
                            captureStillPicture();
                        } else {
                            runPrecaptureSequence();
                        }
                    }
                    break;
                }
                case STATE_WAITING_PRECAPTURE: {
                    // CONTROL_AE_STATE can be null on some devices
                    Integer aeState = result.get(CaptureResult.CONTROL_AE_STATE);
                    if (aeState == null ||
                            aeState == CaptureResult.CONTROL_AE_STATE_PRECAPTURE ||
                            aeState == CaptureRequest.CONTROL_AE_STATE_FLASH_REQUIRED) {
                        mState = STATE_WAITING_NON_PRECAPTURE;
                    }
                    break;
                }
                case STATE_WAITING_NON_PRECAPTURE: {
                    // CONTROL_AE_STATE can be null on some devices
                    Integer aeState = result.get(CaptureResult.CONTROL_AE_STATE);
                    if (aeState == null || aeState != CaptureResult.CONTROL_AE_STATE_PRECAPTURE) {
                        mState = STATE_PICTURE_TAKEN;
                        captureStillPicture();
                    }
                    break;
                }
            }
        }

        @Override
        public void onCaptureProgressed(@NonNull CameraCaptureSession session,
                                        @NonNull CaptureRequest request,
                                        @NonNull CaptureResult partialResult) {
            process(partialResult);
        }

        @Override
        public void onCaptureCompleted(@NonNull CameraCaptureSession session,
                                       @NonNull CaptureRequest request,
                                       @NonNull TotalCaptureResult result) {
            process(result);
        }

    };


    //Choose optimal Size for Preview based on Sensors and TextureView Width, Height
    private static Size chooseOptimalSize(Size[] choices, int textureViewWidth,
                                          int textureViewHeight, int maxWidth, int maxHeight, Size aspectRatio) {

        // Collect the supported resolutions that are at least as big as the preview Surface
        List<Size> bigEnough = new ArrayList<>();
        // Collect the supported resolutions that are smaller than the preview Surface
        List<Size> notBigEnough = new ArrayList<>();
        int w = aspectRatio.getWidth();
        int h = aspectRatio.getHeight();
        for (Size option : choices) {
            if (option.getWidth() <= maxWidth && option.getHeight() <= maxHeight &&
                    option.getHeight() == option.getWidth() * h / w) {
                if (option.getWidth() >= textureViewWidth &&
                        option.getHeight() >= textureViewHeight) {
                    bigEnough.add(option);
                } else {
                    notBigEnough.add(option);
                }
            }
        }

        // Pick the smallest of those big enough. If there is no one big enough, pick the
        // largest of those not big enough.
        if (bigEnough.size() > 0) {
            return Collections.min(bigEnough, new CompareSizesByArea());
        } else if (notBigEnough.size() > 0) {
            return Collections.max(notBigEnough, new CompareSizesByArea());
        } else {
            //Couldn't find any suitable preview size
            return choices[0];
        }
    }


    /**
     * Sets up member variables related to camera.
     *
     * @param width  The width of available size for camera preview
     * @param height The height of available size for camera preview
     */
    @SuppressWarnings("SuspiciousNameCombination")
    private void setUpCameraOutputs(int width, int height) {
        Activity activity = getActivity();
        CameraManager manager = (CameraManager) activity.getSystemService(Context.CAMERA_SERVICE);
        try {
            for (String cameraId : manager.getCameraIdList()) {
                CameraCharacteristics characteristics
                        = manager.getCameraCharacteristics(cameraId);

                maximumZoomLevel = characteristics.get(CameraCharacteristics.SCALER_AVAILABLE_MAX_DIGITAL_ZOOM);

                StreamConfigurationMap map = characteristics.get(
                        CameraCharacteristics.SCALER_STREAM_CONFIGURATION_MAP);
                if (map == null) {
                    continue;
                }

                // For still image captures, we use the largest available size.
                Size largest = map.getOutputSizes(SurfaceTexture.class)[0];

                mImageReader = ImageReader.newInstance(largest.getWidth(), largest.getHeight(),
                        ImageFormat.JPEG, /*maxImages*/2);
                mImageReader.setOnImageAvailableListener(
                        mOnImageAvailableListener, mBackgroundHandler);

                // Find out if we need to swap dimension to get the preview size relative to sensor
                // coordinate.
                int displayRotation = activity.getWindowManager().getDefaultDisplay().getRotation();
                //noinspection ConstantConditions
                mSensorOrientation = characteristics.get(CameraCharacteristics.SENSOR_ORIENTATION);
                boolean swappedDimensions = false;
                switch (displayRotation) {
                    case Surface.ROTATION_0:
                    case Surface.ROTATION_180:
                        if (mSensorOrientation == 90 || mSensorOrientation == 270) {
                            swappedDimensions = true;
                        }
                        break;
                    case Surface.ROTATION_90:
                    case Surface.ROTATION_270:
                        if (mSensorOrientation == 0 || mSensorOrientation == 180) {
                            swappedDimensions = true;
                        }
                        break;
                }

                Point displaySize = new Point();
                activity.getWindowManager().getDefaultDisplay().getSize(displaySize);
                int rotatedPreviewWidth = width;
                int rotatedPreviewHeight = height;
                int maxPreviewWidth = displaySize.x;
                int maxPreviewHeight = displaySize.y;

                if (swappedDimensions) {
                    rotatedPreviewWidth = height;
                    rotatedPreviewHeight = width;
                    maxPreviewWidth = displaySize.y;
                    maxPreviewHeight = displaySize.x;
                }

                if (maxPreviewWidth > MAX_PREVIEW_WIDTH) {
                    maxPreviewWidth = MAX_PREVIEW_WIDTH;
                }

                if (maxPreviewHeight > MAX_PREVIEW_HEIGHT) {
                    maxPreviewHeight = MAX_PREVIEW_HEIGHT;
                }

                // Danger, W.R.! Attempting to use too large a preview size could  exceed the camera
                // bus' bandwidth limitation, resulting in gorgeous previews but the storage of
                // garbage capture data.
                mPreviewSize = chooseOptimalSize(map.getOutputSizes(SurfaceTexture.class),
                        rotatedPreviewWidth, rotatedPreviewHeight, maxPreviewWidth,
                        maxPreviewHeight, largest);

                //mPreviewSize = map.getOutputSizes(SurfaceTexture.class)[0];

                // We fit the aspect ratio of TextureView to the size of preview we picked.
                int orientation = getResources().getConfiguration().orientation;
                if (orientation == Configuration.ORIENTATION_LANDSCAPE) {
                    mTextureView.setAspectRatio(
                            mPreviewSize.getWidth(), mPreviewSize.getHeight());
                } else {
                    mTextureView.setAspectRatio(
                            mPreviewSize.getHeight(), mPreviewSize.getWidth());
                }

                // Check if the flash is supported.
                Boolean available = characteristics.get(CameraCharacteristics.FLASH_INFO_AVAILABLE);
                mFlashSupported = available == null ? false : available;
                return;
            }
        } catch (CameraAccessException e) {
            e.printStackTrace();
        } catch (NullPointerException e) {
            e.printStackTrace();
            // Currently an NPE is thrown when the Camera2API is used but not supported on the
            // device this code runs.
        }
    }


    //Configures the necessary transformation to textureView
    private void configureTransform(int viewWidth, int viewHeight) {
        Activity activity = getActivity();
        if (null == mTextureView || null == mPreviewSize || null == activity) {
            return;
        }
        int rotation = activity.getWindowManager().getDefaultDisplay().getRotation();
        Matrix matrix = new Matrix();
        RectF viewRect = new RectF(0, 0, viewWidth, viewHeight);
        RectF bufferRect = new RectF(0, 0, mPreviewSize.getHeight(), mPreviewSize.getWidth());
        float centerX = viewRect.centerX();
        float centerY = viewRect.centerY();
        if (Surface.ROTATION_90 == rotation || Surface.ROTATION_270 == rotation) {
            bufferRect.offset(centerX - bufferRect.centerX(), centerY - bufferRect.centerY());
            matrix.setRectToRect(viewRect, bufferRect, Matrix.ScaleToFit.FILL);
            float scale = Math.max(
                    (float) viewHeight / mPreviewSize.getHeight(),
                    (float) viewWidth / mPreviewSize.getWidth());
            matrix.postScale(scale, scale, centerX, centerY);
            matrix.postRotate(90 * (rotation - 2), centerX, centerY);
        } else if (Surface.ROTATION_180 == rotation) {
            matrix.postRotate(180, centerX, centerY);
        }
        mTextureView.setTransform(matrix);
    }


    //Open the Camera with the available texture view on screen
    private void openCamera(int width, int height) {
        if (ContextCompat.checkSelfPermission(getActivity(), Manifest.permission.CAMERA)
                != PackageManager.PERMISSION_GRANTED) {
            return;
        }
        setUpCameraOutputs(width, height);
        configureTransform(width, height);
        Activity activity = getActivity();
        CameraManager manager = (CameraManager) activity.getSystemService(Context.CAMERA_SERVICE);
        try {
            if (!mCameraOpenCloseLock.tryAcquire(2500, TimeUnit.MILLISECONDS)) {
                throw new RuntimeException("Time out waiting to lock camera opening.");
            }
            manager.openCamera(mCameraId, mStateCallback, mBackgroundHandler);
        } catch (CameraAccessException e) {
            e.printStackTrace();
        } catch (InterruptedException e) {
            throw new RuntimeException("Interrupted while trying to lock camera opening.", e);
        }
    }

    //Close the camera
    private void closeCamera() {
        try {
            mCameraOpenCloseLock.acquire();
            if (null != mCaptureSession) {
                mCaptureSession.close();
                mCaptureSession = null;
            }
            if (null != mCameraDevice) {
                mCameraDevice.close();
                mCameraDevice = null;
            }
            if (null != mImageReader) {
                mImageReader.close();
                mImageReader = null;
            }
        } catch (InterruptedException e) {
            throw new RuntimeException("Interrupted while trying to lock camera closing.", e);
        } finally {
            mCameraOpenCloseLock.release();
        }
    }

    //Start background thread to handle camera operations
    private void startBackgroundThread() {
        mBackgroundThread = new HandlerThread("CameraBackground");
        mBackgroundThread.start();
        mBackgroundHandler = new Handler(mBackgroundThread.getLooper());
    }

    //Stop the background thread (Done when exiting the app or activity or sending the app to background)
    private void stopBackgroundThread() {
        mBackgroundThread.quitSafely();
        try {
            mBackgroundThread.join();
            mBackgroundThread = null;
            mBackgroundHandler = null;
        } catch (InterruptedException e) {
            e.printStackTrace();
        }
    }


    //Create the Camera Preview
    private void createCameraPreviewSession() {
        try {
            SurfaceTexture texture = mTextureView.getSurfaceTexture();
            //assert texture != null;

            // We configure the size of default buffer to be the size of camera preview we want.
            texture.setDefaultBufferSize(mPreviewSize.getWidth(), mPreviewSize.getHeight());

            // This is the output Surface we need to start preview.
            Surface surface = new Surface(texture);

            // We set up a CaptureRequest.Builder with the output Surface.
            mPreviewRequestBuilder
                    = mCameraDevice.createCaptureRequest(CameraDevice.TEMPLATE_PREVIEW);
            mPreviewRequestBuilder.addTarget(surface);

            // Here, we create a CameraCaptureSession for camera preview.
            mCameraDevice.createCaptureSession(Arrays.asList(surface, mImageReader.getSurface()),
                    new CameraCaptureSession.StateCallback() {

                        @Override
                        public void onConfigured(@NonNull CameraCaptureSession cameraCaptureSession) {
                            // The camera is already closed
                            if (null == mCameraDevice) {
                                return;
                            }

                            // When the session is ready, we start displaying the preview.
                            mCaptureSession = cameraCaptureSession;
                            try {
                                // Auto focus should be continuous for camera preview.
                                mPreviewRequestBuilder.set(CaptureRequest.CONTROL_AF_MODE,
                                        CaptureRequest.CONTROL_AF_MODE_CONTINUOUS_PICTURE);

                                if (useFlash) {
                                    setAutoFlash(mPreviewRequestBuilder);
                                }

                                // Finally, we start displaying the camera preview.
                                mPreviewRequest = mPreviewRequestBuilder.build();
                                mCaptureSession.setRepeatingRequest(mPreviewRequest,
                                        mCaptureCallback, mBackgroundHandler);
                            } catch (CameraAccessException e) {
                                e.printStackTrace();
                            }
                        }

                        @Override
                        public void onConfigureFailed(@NonNull CameraCaptureSession cameraCaptureSession) {

                        }
                    }, null
            );
        } catch (CameraAccessException e) {
            e.printStackTrace();
        }
    }


    //Lock the FOcus so that the image does not lose focus and go blurred
    private void lockFocus() {
        try {
            // This is how to tell the camera to lock focus.
            mPreviewRequestBuilder.set(CaptureRequest.CONTROL_AF_TRIGGER,
                    CameraMetadata.CONTROL_AF_TRIGGER_START);
            // Tell #mCaptureCallback to wait for the lock.
            mState = STATE_WAITING_LOCK;
            mCaptureSession.capture(mPreviewRequestBuilder.build(), mCaptureCallback,
                    mBackgroundHandler);
        } catch (CameraAccessException e) {
            e.printStackTrace();
        }
    }


    //Run the precapture sequence for capturing a still image
    private void runPrecaptureSequence() {
        try {
            // This is how to tell the camera to trigger.
            mPreviewRequestBuilder.set(CaptureRequest.CONTROL_AE_PRECAPTURE_TRIGGER,
                    CaptureRequest.CONTROL_AE_PRECAPTURE_TRIGGER_START);
            // Tell #mCaptureCallback to wait for the precapture sequence to be set.
            mState = STATE_WAITING_PRECAPTURE;
            mCaptureSession.capture(mPreviewRequestBuilder.build(), mCaptureCallback,
                    mBackgroundHandler);
        } catch (CameraAccessException e) {
            e.printStackTrace();
        }
    }


    //Capture the picture. This is called once response is received and ready for capture
    private void captureStillPicture() {
        try {
            final Activity activity = getActivity();
            if (null == activity || null == mCameraDevice) {
                return;
            }
            // This is the CaptureRequest.Builder that we use to take a picture.
            final CaptureRequest.Builder captureBuilder =
                    mCameraDevice.createCaptureRequest(CameraDevice.TEMPLATE_STILL_CAPTURE);
            captureBuilder.addTarget(mImageReader.getSurface());

            // Use the same AE and AF modes as the preview.
            captureBuilder.set(CaptureRequest.CONTROL_AF_MODE,
                    CaptureRequest.CONTROL_AF_MODE_CONTINUOUS_PICTURE);

            //Capture Zoomed In Image
            if (zoom != null && allowZoom) {
                captureBuilder.set(CaptureRequest.SCALER_CROP_REGION, zoom);
            }


            /*Rect croppedZoom = new Rect((int)(frameWidth),
                    (int)(frameHeight),
                    (int)(frameLeft + frameHeight),
                    (int)(frameTop + frameWidth));
            if (croppedZoom != null) {
                captureBuilder.set(CaptureRequest.SCALER_CROP_REGION, croppedZoom);
            }*/

            if (useFlash) {
                setAutoFlash(captureBuilder);
            }

            // Orientation
            int rotation = activity.getWindowManager().getDefaultDisplay().getRotation();
            captureBuilder.set(CaptureRequest.JPEG_ORIENTATION, getOrientation(rotation));

            CameraCaptureSession.CaptureCallback CaptureCallback
                    = new CameraCaptureSession.CaptureCallback() {

                @Override
                public void onCaptureCompleted(@NonNull CameraCaptureSession session,
                                               @NonNull CaptureRequest request,
                                               @NonNull TotalCaptureResult result) {
                    unlockFocus();
                }
            };

            mCaptureSession.stopRepeating();
            mCaptureSession.abortCaptures();
            mCaptureSession.capture(captureBuilder.build(), CaptureCallback, null);
        } catch (CameraAccessException e) {
            e.printStackTrace();
        }
    }


    //Get the JPEG orientation from the specified screen rotation
    private int getOrientation(int rotation) {
        // Sensor orientation is 90 for most devices, or 270 for some devices (eg. Nexus 5X)
        // We have to take that into account and rotate JPEG properly.
        // For devices with orientation of 90, we simply return our mapping from ORIENTATIONS.
        // For devices with orientation of 270, we need to rotate the JPEG 180 degrees.
        if (mCameraId == "0") {
            return (REAR_ORIENTATIONS.get(rotation) + mSensorOrientation + 270) % 360;
        } else {
            return (FRONT_ORIENTATIONS.get(rotation) + mSensorOrientation + 270) % 360;
        }
    }

    //This is called once our image is done with capture
    private void unlockFocus() {
        try {
            // Reset the auto-focus trigger
            mPreviewRequestBuilder.set(CaptureRequest.CONTROL_AF_TRIGGER,
                    CameraMetadata.CONTROL_AF_TRIGGER_CANCEL);

            if (useFlash) {
                setAutoFlash(mPreviewRequestBuilder);
            }

            mCaptureSession.capture(mPreviewRequestBuilder.build(), mCaptureCallback,
                    mBackgroundHandler);
            // After this, the camera will go back to the normal state of preview.
            mState = STATE_PREVIEW;
            mCaptureSession.setRepeatingRequest(mPreviewRequest, mCaptureCallback,
                    mBackgroundHandler);
        } catch (CameraAccessException e) {
            e.printStackTrace();
        }
    }


    //Enable Flash
    private void setAutoFlash(CaptureRequest.Builder requestBuilder) {
        if (mFlashSupported) {
            requestBuilder.set(CaptureRequest.CONTROL_AE_MODE,
                    CaptureRequest.CONTROL_AE_MODE_ON_AUTO_FLASH);
        }
    }


    //Save Image to DIrectory
    private static class ImageSaver implements Runnable {

        private final Image mImage;

        //The Directory we will save it to
        private final File mFile;

        ImageSaver(Image image, File file) {
            mImage = image;
            mFile = file;
        }

        @Override
        public void run() {
            ByteBuffer buffer = mImage.getPlanes()[0].getBuffer();
            byte[] bytes = new byte[buffer.remaining()];
            buffer.get(bytes);
            FileOutputStream output = null;
            try {
                output = new FileOutputStream(mFile);
                output.write(bytes);
            } catch (IOException e) {
                e.printStackTrace();
            } finally {
                mImage.close();
                if (null != output) {
                    try {
                        output.close();
                    } catch (IOException e) {
                        e.printStackTrace();
                    }
                }
            }
        }
    }


    //Save Cropped Image to Directory
    private static class CroppedImageSaver implements Runnable {

        private final Image mImage;

        //The Directory we will save it to
        private final File mFile;

        //The Dimensions
        private float frameWidth, frameHeight, frameTop, frameLeft;

        CroppedImageSaver(Image image, File file, float frameWidth, float frameHeight, float frameTop, float frameLeft) {
            mImage = image;
            mFile = file;
            this.frameWidth = frameWidth;
            this.frameHeight = frameHeight;
            this.frameTop = frameTop;
            this.frameLeft = frameLeft;
        }

        @Override
        public void run() {
            ByteBuffer buffer = mImage.getPlanes()[0].getBuffer();
            byte[] bytes = new byte[buffer.remaining()];
            buffer.get(bytes);

            //Get Bitmap From bytes
            BitmapFactory.Options options = new BitmapFactory.Options();
            Bitmap captureBitmap = BitmapFactory.decodeByteArray(bytes, 0, bytes.length, options);
            //captureBitmap.recycle();

            //Resize Bitmap to Screen Size
            Bitmap resizedBitmap = Bitmap.createScaledBitmap(captureBitmap, DroidFunctions.getScreenWidth(),
                    DroidFunctions.getScreenHeight(), false);
            captureBitmap.recycle();

            //Crop the resized Bitmap
            int x = (int) ((frameLeft * frameWidth)/resizedBitmap.getWidth());
            int y = (int) ((frameTop * frameHeight)/resizedBitmap.getHeight());
            Matrix matrix = new Matrix();
            matrix.postRotate(90);
            Bitmap croppedBmp = Bitmap.createBitmap(resizedBitmap,
                    (int)(frameLeft),
                    (int)(frameTop),
                    (int)(frameWidth),
                    (int)(frameHeight),
                    matrix,
                    true);
            resizedBitmap.recycle();

            FileOutputStream output = null;
            try {
                output = new FileOutputStream(mFile);
                croppedBmp.compress(Bitmap.CompressFormat.PNG, 100, output);
                croppedBmp.recycle();
            } catch (IOException e) {
                e.printStackTrace();
            } finally {
                mImage.close();
                if (null != output) {
                    try {
                        output.close();
                    } catch (IOException e) {
                        e.printStackTrace();
                    }
                }
            }
        }
    }


    //Compares two Sizes based on their areas.
    static class CompareSizesByArea implements Comparator<Size> {
        @Override
        public int compare(Size lhs, Size rhs) {
            // We cast here to ensure the multiplications won't overflow
            return Long.signum((long) lhs.getWidth() * lhs.getHeight() -
                    (long) rhs.getWidth() * rhs.getHeight());
        }
    }


    //Setting Up Pinch Zoom
    private void setUpPinchZoom () {
        mTextureView.setOnTouchListener(new View.OnTouchListener() {
            @Override
            public boolean onTouch(View view, MotionEvent event) {
                try {
                    if (allowZoom) {
                        CameraManager manager = (CameraManager) getActivity().getSystemService(Context.CAMERA_SERVICE);
                        CameraCharacteristics cameraCharacteristics = manager.getCameraCharacteristics(mCameraId);

                        Rect rect = cameraCharacteristics.get(CameraCharacteristics.SENSOR_INFO_ACTIVE_ARRAY_SIZE);
                        if (rect == null) {
                            return false;
                        }
                        float currentFingerSpacing;

                        if (event.getPointerCount() == 2) { //Multi touch.
                            currentFingerSpacing = getFingerSpacing(event);
                            float delta = 0.01f; //Control this value to control the zooming sensitivity
                            if (fingerSpacing != 0) {
                                if (currentFingerSpacing > fingerSpacing) { //Don't over zoom-in
                                    if ((maximumZoomLevel - zoomLevel) <= delta) {
                                        delta = maximumZoomLevel - zoomLevel;
                                    }
                                    zoomLevel = zoomLevel + delta;
                                } else if (currentFingerSpacing < fingerSpacing){ //Don't over zoom-out
                                    if ((zoomLevel - delta) < 1f) {
                                        delta = zoomLevel - 1f;
                                    }
                                    zoomLevel = zoomLevel - delta;
                                }
                                float ratio = (float) 1 / zoomLevel; //This ratio is the ratio of cropped Rect to Camera's original(Maximum) Rect
                                //croppedWidth and croppedHeight are the pixels cropped away, not pixels after cropped
                                int croppedWidth = rect.width() - Math.round((float)rect.width() * ratio);
                                int croppedHeight = rect.height() - Math.round((float)rect.height() * ratio);
                                //Finally, zoom represents the zoomed visible area
                                zoom = new Rect(croppedWidth/2, croppedHeight/2,
                                        rect.width() - croppedWidth/2, rect.height() - croppedHeight/2);
                                mPreviewRequestBuilder.set(CaptureRequest.SCALER_CROP_REGION, zoom);
                            }
                            fingerSpacing = currentFingerSpacing;
                        } else { //Single touch point, needs to return true in order to detect one more touch point
                            return true;
                        }
                        mCaptureSession.setRepeatingRequest(mPreviewRequestBuilder.build(), mCaptureCallback, mBackgroundHandler);
                        return true;
                    }
                    else {
                        //No Zoom Allowed
                        return false;
                    }
                } catch (final Exception e) {
                    //Error handling up to you
                    return true;
                }
            }
        });
    }

    //Finger Spacing for Pinch Zoom
    private float getFingerSpacing(MotionEvent event) {
        float x = event.getX(0) - event.getX(1);
        float y = event.getY(0) - event.getY(1);
        return (float) Math.sqrt(x * x + y * y);
    }


    //Click Picture
    public void takePicture(String imageName) {
        if (imageName == null || imageName.trim().equalsIgnoreCase("")) {
            Long timeStamp = System.currentTimeMillis() / 1000;
            imageName = timeStamp.toString();
        }

        createFolderInExternalStorage();

        if (folder != null) {
            imageDirectory = new File(folder, imageName + ".jpg");
        }

        if (mCameraId.equalsIgnoreCase("0")) {
            lockFocus();
        } else {
            captureStillPicture();
        }
    }

    public void useFrontCamera() {
        mCameraId = "1";
        restartCamera();
    }

    public void useRearCamera() {
        mCameraId = "0";
        restartCamera();
    }

    public void setFlashEnabled(boolean useFlash) {
        this.useFlash = useFlash;
        restartCamera();
    }

    public void setZoomEnabled(boolean allowZoom) {
        this.allowZoom = allowZoom;
        restartCamera();
    }

    public void setCropFrame(Bitmap frame, float widthInDp, float heightInDp) {
        this.cropFrame = frame;
        this.frameWidth = widthInDp;
        this.frameHeight = heightInDp;
    }

    public void restartCamera() {
        if (mTextureView != null) {
            closeCamera();
            if (mTextureView.isAvailable()) {
                openCamera(mTextureView.getWidth(), mTextureView.getHeight());
            } else {
                mTextureView.setSurfaceTextureListener(mSurfaceTextureListener);
            }
        }
    }
}
